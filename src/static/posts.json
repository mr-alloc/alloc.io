[
  {
    "path": "/docs/typescript/typescript-getting-start",
    "header": {
      "layout": "post",
      "title": "타입스크립트 시작하기 1 (소개)",
      "categories": [
        "language",
        "typescript"
      ],
      "tags": [
        "Typescript",
        "Javascript",
        "Type"
      ],
      "date": 1681552860000,
      "current-company": "NEOWIZ",
      "current-position": "Software Engineer",
      "profile-image": "/blogging/profile/profile1.JPG",
      "thumbnail": "/blogging/typescript/typescript_getting_start.png",
      "summary": "타입스크립트 소개",
      "excerpt-separator": "<!--more-->",
      "hide": false,
      "breadcrumbs": [
        "문서",
        "타입스크립트"
      ],
      "images": [],
      "headlines": {
        "grade": 0,
        "title": "root",
        "fragmentId": "root",
        "children": [
          {
            "grade": 2,
            "title": "우리가 아는 자바스크립트",
            "fragmentId": "%EC%9A%B0%EB%A6%AC%EA%B0%80-%EC%95%84%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8",
            "children": [],
            "isSelected": false
          },
          {
            "grade": 2,
            "title": "타입스크립트는 무엇인가?",
            "fragmentId": "%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%3F",
            "children": [],
            "isSelected": false
          },
          {
            "grade": 2,
            "title": "타입스크립트를 배우기전 ES5 또는 ESNext의 주요 문법을 알아보자",
            "fragmentId": "%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EB%B0%B0%EC%9A%B0%EA%B8%B0%EC%A0%84-es5-%EB%98%90%EB%8A%94-esnext%EC%9D%98-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EB%B2%95%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90",
            "children": [
              {
                "grade": 3,
                "title": "비구조화 할당",
                "fragmentId": "%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94-%ED%95%A0%EB%8B%B9",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "화살표 함수 (arrow function)",
                "fragmentId": "%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-(arrow-function)",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "클래스 (class)",
                "fragmentId": "%ED%81%B4%EB%9E%98%EC%8A%A4-(class)",
                "children": [],
                "isSelected": false
              }
            ],
            "isSelected": false
          }
        ],
        "isSelected": false
      }
    },
    "description": "타입스크립트 시작하기.\r\n도대체 왜 사용하는거고, 뭐가 좋은걸까?\r\n",
    "content": "\r\n\r\n## 우리가 아는 자바스크립트\r\n\r\n사실 나도 타입스크립트를 처음 배우는 거고, 잘 알지 못한다. 하지만, 자바스크립트와 같이 **동적타입**의 언어는 결국 많은 문제를 유발 시킬수 있는걸 알고 있다.\r\n일반 자바스크립트에는 타입이 없기 때문에 코드대로 그냥 변수로 받아야한다. 따라서 아래와 같은 일반 자바스크립트에서는 해괴한 연산도 가능하다.\r\n\r\n```test.js\r\n//일반 자바스크립트 함수의 선언\r\nfunction getNow() {\r\n    return new Date()\r\n}\r\n\r\nvar now = getNow();\r\nvar plus1Day = now + '1Day';\r\nconsole.log('plusDay:', plus1Day) \r\n//출력결과 -> plusDay: Sat Apr 15 2023 19:12:32 GMT+0900 (한국 표준시)1Day\r\n```\r\n\r\n3번라인에서 보면 `getNow()` 함수는 `Date` 타입의 현재시간 값을 리턴한다. 근데, 7번라인에서 다시보면 `Date` 타입과 `string` 연산을 한다.\r\n하지만, 어떠한 에러도 발생되지 않는다. 결과적으로 연산된 `plus1Day` 변수의 타입은 `string`이다.\r\n`Date` 함수와 `string`의 덧셈에 결과타입이 `string`인 내용은, 타입스크립트를 알아보는 과정에서 별로 중요하지 않기에 넘어간다.\r\n\r\n이 처럼 타입이 존재는 하지만, 변수가 타입에 연연하지않은 언어를 `동적타입 언어`라고 한다. \r\n우리가 일반적으로 알고있는 객체지향 언어는 모두 정적타입 언어 이다. 각 변수의 타입이 정해져있고, 정해진대로 연산을 하기 때문이다.\r\n게다가 `javascript`는 ECMA Script(ES)라는 표준 스크립트 버전이 있는데, 현재 우리가 사용중인 브라우저는 ES5 버전만 해석할 수 있다.\r\n\r\n`ES5`버전은 2009년에 공개된 버전이며, 현재까지 브라우저는 해당 버전이상의 자바스크립트는 해석할 수 없다.\r\n이 이상의 버전을 사용하려면, Babel(Javascript Compiler)같은 특정도구를 이용해 브라우저가 해석할 수 있는 자바스크립트의 버전으로 컴파일 해줘야 한다.\r\n이 외에도 `ES5`이상에서 지원되는 javascript 버전에는 여러가지 기능 및 문법들을 사용할수 있었다.\r\n\r\n```javascript\r\n//ES6 문법 const\r\nconst sum = (a, b) => {\r\n    return a + b\r\n}\r\n```\r\n위의 설명대로 브라우저는 `const`를 알 수 없다. 하지만 브라우저 내부에있는 js 엔진이 해석할 수 있기에 우리는 `ES`버전은 딱히 몰라도 상관없다.\r\n타입스크립트를 배우기위해선, 위의 내용들을 알고있어야한다. `ES5`의 문법은 당연히 `ESNext(6, 7..)`에서 포함하고 있고, 이또한 `Typescript`에서 포함하고있다.\r\n`타입스크립트`또한, `ESNext`와 동일하게 ES5로 `Transpile`을 해줘야 하는건 예외 없다. \r\n\r\n그럼 우리가 아는 자바스크립트를 그냥 사용해도 되는데, 왜 굳이 타입스크립트를 사용하는 걸까?\r\n\r\n## 타입스크립트는 무엇인가?\r\n\r\n간단하게 설명하면, 동적타입의 언어와 같이 모든 객체는 타입을 가지며, `Null-Sefe`한 연산을 할 수 있는 등 여러 장점이 있다.\r\n예를 들어 다음과 같은 `Javascript` 코드에서 문제가 발생 했을 때, 쉽게 문제를 알수 없다.\r\n\r\n```javascript\r\nfunction makePerson(name, age) {\r\n    return {\r\n        name: name,\r\n        age: age\r\n    }\r\n}\r\n\r\nconst person = makePerson(30, 'Kim')\r\n```\r\n\r\n하지만, 위와 같은 코드에 각 변수에대한 타입이 생긴다면, 작성할 때부터 문제를 알 수 있다.\r\n만약 위에 코드에서 타입이 추가된다면 어떻게 달라질까?\r\n\r\n```typescript\r\nclass Person {\r\n    name: string\r\n    age: number\r\n\r\n    constructor(name: string, _age_: number) {\r\n        this.name = name\r\n        this.age = age\r\n    }\r\n}\r\n\r\nfunction makePerson(name: string, age: number): Person {\r\n    return new Person(name, age)\r\n}\r\n\r\nconst person: Person = makePerson('Kim', 4)\r\n```\r\n\r\n좀 더 많은 코드가 작성되었다. 하지만, 각 변수는 타입을 가지며, 좀 더 견고한 어플리케이션을 만들수 있는 타입이 생겼다.\r\n클래스 생성을 통해, 의도한 값을 가지는 타입의 객체가 생성되었다. 이는 정말 중요한 내용이다.\r\n기존에 자바스크립트에서 할 수 없었던, 그리고 걱정하지 않아도 되었던, 코드를 작성할 수 있게된다.\r\n\r\n## 타입스크립트를 배우기전 ES5 또는 ESNext의 주요 문법을 알아보자\r\n\r\n앞서 말한것처럼 `Typescript`는 `ESNext`, `ES5`모두 포괄하고 있는 상위 집합이기에, 두가지 문법을 모두 사용할 수 있다.\r\n타입스크립몇가지 간단한 문법을 \r\n\r\n### 비구조화 할당\r\n\r\n`비구조화 할당(destructuring assignment)`는 객체와 배열에 적용할 수 있으며, 말그대로 구조화 하지않은 채 값을 특정 변수로 할당 하는 것 이다.\r\n이는 `ESNext`에서 제공되며,  \r\n\r\n```javascript{6}\r\nlet person = {\r\n    first_name: 'John',\r\n    age: 30\r\n}\r\n\r\nlet { first_name, age } = person\r\n\r\nconsole.log(typeof age) // \"number\"\r\nconsole.log(age)        // 30\r\nconsole.log(first_name) // \"John\"\r\n```\r\n\r\nperson을 이용하여, 비구조화 할당을 통해 `first_name` field와 `age`필드를 할당 할 수 있다.\r\n그럼 이 할당을 통해, `let { first_name, age }`의 값 중 `first_name`의 값을 바꾸면 어떻게 될까?\r\n\r\n```javascript\r\nlet person = {\r\n    first_name: 'John',\r\n    age: 30\r\n}\r\n\r\nlet { first_name, age } = person\r\n\r\nfirst_name = 'Micheal'\r\nconsole.log('person:', person)\r\n/*\r\n    person: {\r\n        \"first_name\": \"John\",\r\n        \"age\": 30\r\n    }\r\n */\r\nperson.first_name = 'Smith'\r\nconsole.log('first_name:', first_name)\r\n/*\r\n    first_name: Micheal\r\n */\r\n```\r\n\r\n첫번째로 할당된 `first_name`의 값을 변경했지만, 변경 되지 않았다.\r\n또한, 반대로 `person.first_name`의 값을 변경 했지만, 역시나 `first_name`의 값이 변경 되지 않았다.\r\n여기서 `비구조화 할당`은 얕은복사를 하는걸 알 수 있다.\r\n배열의 비구조화 할 당은 어떻게 사용할 수 있을까?\r\n\r\n```javascript{2}\r\nlet array = [1, 7, 54, 66, 90]\r\nlet [first, ...mod] = array\r\n\r\nconsole.log(array) // [1, 7, 54, 66, 90]\r\nconsole.log(first) // 1\r\nconsole.log(mod)   // [7, 54, 66, 90]\r\n```\r\n\r\n>2번 라인의 `...mod`는 `스프레드 연산자`이며, 내부 요소를 한번에 가져온다.\r\n> 스프레드 연산자는 인자의 마지막에만 사용할 수 있다.\r\n:{ \"type\": \"note\", \"icon\": \"info\" }\r\n\r\n`first`와 `mod`로 나누어 할당 했고 출력 결과는 위 처럼 배열의 순서에 맞는 값들로 나뉘어졌다.\r\n`객체`또는 `배열`의 구조를 분해해서 할당하기 때문에 `구조분해 할당`(`또는 \"비구조화 할당\"`)이라고 칭한다.\r\n\r\n\r\n### 화살표 함수 (arrow function)\r\n\r\n```javascript\r\n// 일반 함수형\r\nfunction toUpperCase(str) {\r\n    return str.toUpperCase()\r\n}\r\n\r\n// 화살표 함수형\r\nconst toUpperCase = () => str.toUpperCase()\r\n```\r\n\r\n자바스크립트에서는 함수또한 객체로 취급되며, 위와 같은 표현식으로 선언할 수 있다.\r\n이 화살표 함수(`arrow function`)은 내부로직이 한줄로 표현이 된다면, `{}`괄호와 `return`을 생략할 수있다.\r\n중요한 부분은 `=`다음으로 오는 `() => {}`구문이다. `()`에는 일반함수처럼 매개변수를 받을 수 있고, `{}` 내부 또한 함수와 동일하게 작성할 수 있다.\r\n*주의할 점*은 `화살표 함수` 내에서 `this` 키워드는 함수 `자신`을 의미한다는 점을 알고 있어야 한다. \r\n이는 `javascript`객체와 관련된 부분인데, `javascript`에서 `this`는 객체의 참조를 의미한다. \r\n`class` 또는 모듈에서 사용한다면, 현재 속해있는 객체(`브라우저`일반적으로 `window: DOM tree`로 바인딩) 에대해 바인딩 하기때문에, \r\n객체 자체인 `arrow`함수는 `this`에 대해 자기 자신이 바인드 되는 것이다.\r\n\r\n### 클래스 (class)\r\n\r\n일반적으로 객체지향 언어에서 지원 하는 `class`의 개념은 어떤 객체에 대해 정적인 관점에서 서술 할 때 사용 된다.\r\n아래의 예제를 통해 `알람시계`가 갖고있는 정적인 관점의 상태와 책임에 대해 좀더 객체지향적으로 이해하기 위해 `typescript`를 통해 알아보자.\r\n\r\n```typescript\r\n\r\nclass Speaker {\r\n    ringing() {\r\n        //저장된 음악으로, 스피커 동작 로직    \r\n    }\r\n}\r\n\r\ninterface Alarm {\r\n    alert(message: string): never\r\n}\r\n\r\nclass Clock implements Alarm {\r\n\r\n    private readonly _speaker: Speaker\r\n\r\n    constructor(speaker: Speaker) {\r\n        this._speaker = speaker\r\n    }\r\n    \r\n    setTimeOfRinging(milis: number, message: string): never {\r\n        setTimeout(() => {\r\n            this._speaker.ringing()\r\n            alert()\r\n        }, milis)\r\n    }\r\n    \r\n    alert(message: string): never {\r\n        console.log(message)\r\n    }\r\n}\r\n\r\nconst clock: Clock = new Clock(new Speaker())\r\nclock.setTimeOfRinging(1000, '1초가 지났습니다.')\r\n```\r\n\r\n기존에 `javascript`에서는 할 수 없던, 객체의 상속, 추상화가 가능 하므로서, 간단한 알람시계 클래스지만,각 객체들의 `책임`을 부여하므로써,\r\n좀 더 견고한 `어플리케이션`을 만들 수 있다.\r\n"
  },
  {
    "path": "/docs/algorithm/heap-sort",
    "header": {
      "layout": "post",
      "title": "Heap sort (힙 정렬) feat.java",
      "categories": [
        "algorithm"
      ],
      "tags": [
        "Java",
        "Algorithm",
        "Sort",
        "Heap Sort",
        "Heap"
      ],
      "date": 1651837980000,
      "profile-image": "/blogging/profile/profile4.jpeg",
      "thumbnail": "/blogging/algorithm/heap/heap_sort_intro.png",
      "current-company": "Herit Corporation",
      "current-position": "Backend Server Developer",
      "summary": "힙과 힙정렬 (우선순위 큐)",
      "expose-images": true,
      "excerpt-separator": "<!--more-->",
      "hide": false,
      "breadcrumbs": [
        "문서",
        "알고리즘"
      ],
      "images": [
        {
          "src": "/blogging/algorithm/heap/tree_images.svg",
          "alt": "위 트리중 어떤것이 힙인지 찾아보세요."
        },
        {
          "src": "/blogging/algorithm/heap/first_iteration.svg",
          "alt": "힙을 만드려면 완전 이진트리가 있어야 해요."
        },
        {
          "src": "/blogging/algorithm/heap/other_iteration.svg",
          "alt": "만약 마지막 내부노드부터 순회할 때, 쵀대힙을 만드려면 위와 같이 만들수 있어요."
        },
        {
          "src": "/blogging/algorithm/heap/last_iteration.svg",
          "alt": "최대힙을 만들어 이런 형태로 노드를 나눌수 있어요."
        },
        {
          "src": "/blogging/algorithm/heap/add_new_17.svg",
          "alt": "만약 다음의 힙에서 17이라는 값이 추가 된다면"
        },
        {
          "src": "/blogging/algorithm/heap/add_new_17_2.svg",
          "alt": "이런식으로 부모노드와 바꿔가며, 다시 힙을 유지할 수 있어요."
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_1.svg",
          "alt": "힙 정렬 1"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_2.svg",
          "alt": "힙 정렬 2"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_3.svg",
          "alt": "힙 정렬 3"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_4.svg",
          "alt": "힙 정렬 4"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_5.svg",
          "alt": "힙 정렬 5"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_6.svg",
          "alt": "힙 정렬 6"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_7.svg",
          "alt": "힙 정렬 7"
        },
        {
          "src": "/blogging/algorithm/heap/heap_sort_1_8.svg",
          "alt": "힙 정렬 8"
        }
      ],
      "headlines": {
        "grade": 0,
        "title": "root",
        "fragmentId": "root",
        "children": [
          {
            "grade": 2,
            "title": "설명",
            "fragmentId": "%EC%84%A4%EB%AA%85",
            "children": [
              {
                "grade": 3,
                "title": "Heap의 속성 (특징)",
                "fragmentId": "heap%EC%9D%98-%EC%86%8D%EC%84%B1-(%ED%8A%B9%EC%A7%95)",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "Heap을 만드는 방법",
                "fragmentId": "heap%EC%9D%84-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "Heap이 우선 값을 유지하는 방법",
                "fragmentId": "heap%EC%9D%B4-%EC%9A%B0%EC%84%A0-%EA%B0%92%EC%9D%84-%EC%9C%A0%EC%A7%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "Heap을 이용해 정렬을 하는 방법",
                "fragmentId": "heap%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A0%95%EB%A0%AC%EC%9D%84-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
                "children": [],
                "isSelected": false
              }
            ],
            "isSelected": false
          },
          {
            "grade": 2,
            "title": "구현 코드 (Java)",
            "fragmentId": "%EA%B5%AC%ED%98%84-%EC%BD%94%EB%93%9C-(java)",
            "children": [],
            "isSelected": false
          }
        ],
        "isSelected": false
      }
    },
    "description": "열라 간단한 우선순위 큐의 자료구조인 Heap에 대해 공부합니다.\r\n힙의 속성?! 힙이 최소 또는 최대값을 유지하는 방법?!\r\n\r\n힙을통해 정렬하는 방법까지 공부합니다. 😁\r\n\r\n",
    "content": "\r\n\r\n## 설명\r\n\r\n간단하게 말하여, 힙은 우선순위 큐 입니다. `JAVA`에서는 `PriorityQueue`라는 구현체를 통해 Heap 자료구조를 사용할 수 있어요.\r\n힙은 두 종류가 있는데 `최대 힙`과 `최소 힙`이 있어요. \r\n최대 Heap(최소 Heap)은 단어와 같이 최대 값(최소 값)을 우선순위로 판단하여, 어떠한 값이 들어와도, 항상 같은 순서의\r\n트리를 유지하며, 언제든지 최고 우선순위의 값을 적은 비용으로 쉽게 얻을수 있는 자료구조 입니다.\r\n\r\n### Heap의 속성 (특징)\r\n\r\n* 최대 힙(**또는 최소 힙**)은 `잎(leaf)`의 계층을 제외한 모든 노드는 자식의 노드 보다 큰(**또는 작은**) 값을 가지고 있어야합니다.\r\n* 왼쪽부터 차례대로 채워져있는 `완전 이진 트리(Complete binary tree)`이어야 합니다.\r\n* 같은 계층의 노드들과는 정렬하지 않습니다.\r\n* 루트(뿌리)노드로 부터 내려오는 위치의 노드들 오름차순(**또는 내림차순**)입니다\r\n\r\n![위 트리중 어떤것이 힙인지 찾아보세요.](/blogging/algorithm/heap/tree_images.svg)\r\n\r\n* 트리 A: 잎을 제외한 노드는 모두 정렬되었지만, 왼쪽부터 채워지지않아 Heap이 아닙니다.\r\n* 트리 B: 왼쪽부터 채워졌지만, 2번노드의 값은 그 자식에값보다 작습니다. 따라서 Heap이 아닙니다.\r\n* 트리 C: 잎을 제외한 모든 노드가 자식 또는 부모와 정렬 되어있고, 왼쪽부터 채워져있으므로 `Heap`입니다.\r\n\r\n> 이를 정리하면 아래와 같습니다.   \r\n> 1.`𝑛개`의 노드를 가진 힙은 정확히 하나만 있고 그 힙(트리)의 높이(height)는 `⎣log₂𝑛⎦`이다. 트리의 전체 노드의 개수가 `8`일경우 트리(힙)의 높이는 `3`이다. 즉 힢의 높이는 힙의 성질(속성)에 부합되는 노드들만 인정이 된다는 의미이다.  \r\n> 2.힙의 루트 노드는 항상 최댓값(**또는 최솟값**)을 저장한다. 최대 힙(**또는 최소 힙**)은 쵀댓값(**또는 최솟값**)을 효율적으로 관리하기 위한 자료구조이며, 루트에는 항상 가장 큰(**또는 작은**)값을 유지한다.  \r\n> 3.힙의 한 노드와 그 노드의 자손 노드들로 이루어진 부분 트리(subtree)도 힙이다. 힙은 힙으로 이루어져있으며 자식노드도 힙이 될수있지만, 노드의 자식이없다면 힙이될 수없다. 따라서 위 C 트리의 `4, 5, 6`번 노드는 힙이 아니다.  \r\n:{ \"type\": \"note\", \"icon\": \"info\" }\r\n\r\n### Heap을 만드는 방법\r\n\r\n힙을 구성 하기 위해서는 다음의 순서대로 진행됩니다.\r\n\r\n1. 순회를 시작할 힙이되는 마지막 노드`⎣𝑛/₂⎦`를 찾는다.\r\n2. 마지막 노드 i를 이용해 자식노드가 있는지, 또한 있다면 그 중 자신 보다 큰값을 자신과 찾는다.\r\n3. 찾은 값과 자신을 바꾸고 바꾼 자신의 위치는 그값의 자식이 되며, 자신보다 큰값이 나오지 않을때까지 반복한다.\r\n4. 다음 노드(i -1)에서 다시 `3.`을 반복한다.\r\n\r\n> 자식 노드의 위치를 찾을때는 왼쪽`arr[2i]`값과 오른쪽`arr[2i + 1]`로 구할 수 있습니다.\r\n:{ \"type\": \"tip\", \"icon\": \"lightbulb\" }\r\n\r\n위 의 내용을 정리하면 아래와 같습니다.\r\n\r\n\r\n![힙을 만드려면 완전 이진트리가 있어야 해요.](/blogging/algorithm/heap/first_iteration.svg)\r\n\r\n> 위의 트리는 *완전 이진트리* 입니다. 힙은 완전이진트리에서 만들수 있으므로, 일반 이진트리는 Compact하게 완전이진트리로 바꿔야 힙을 만들수 있습니다.\r\n> 왼쪽 트리의 마지막 힙의 값은 `15` 이며, 이는 자식(`6, 4`) 어느것 보다도 큰값입니다. 따라서 다음 순회로 넘어갑니다.\r\n> 순회는 내부 노드의 마지막 힙의 위치에서 부터 1까지 이어집니다. 따라서 다음 인덱스인 3번 노드(9)로 넘어갑니다.\r\n> 3번노드는 자신의 자식들 중 6번째, 7번째 (7, 12)와 비교하여 더 큰값을 가지는 12와 바꿉니다.\r\n:{ \"type\": \"note\", \"icon\": \"info\" }\r\n\r\n![만약 마지막 내부노드부터 순회할 때, 쵀대힙을 만드려면 위와 같이 만들수 있어요.](/blogging/algorithm/heap/other_iteration.svg)\r\n\r\n> 이후 과정은 위와 같이 반복됩니다. 내부노드를 순회하며 자신의 자식노드가 있는지 확인하고 있다면, 자신과 비교하여 더큰 값으로 바꿉니다. 이는 바꾼이후에도 `3.`이 반복되게 됩니다. 순회되는 노드가 최상위노드가 되고 모든 내부노드가 힙이 될때, 전체 트리는 힙이 됩니다.   \r\n> 마지막까지 바꾼 최종트리는 아래와 같습니다.\r\n:{ \"type\": \"note\", \"icon\": \"info\" }\r\n\r\n![최대힙을 만들어 이런 형태로 노드를 나눌수 있어요.](/blogging/algorithm/heap/last_iteration.svg)\r\n\r\n* 최상위 노드(루트)가 가장 큰값이 되며, 위는 최대힙을 만드는 단계였습니다.\r\n* 부모노드와 자식노드끼리는 순서의 값을 가지며, 항상 최대의 값을 가집니다.  \r\n\r\n### Heap이 우선 값을 유지하는 방법\r\n\r\n위에서는 완전이진트리로 힙을 어떻게 만드는지에 대해 알아봤습니다.\r\n하지만, 힙은 언제나 새로운값이 들어와도 항상 우선 순위로 값을 관리합니다. 만약 저기서 더큰값이 추가된다면,\r\n저 힙트리는 어떻게 바뀔까요? 새로운 값들을 추가해서 힙이 다시 어떻게 유지되는지 배워봅니다.\r\n\r\n#### 값추가\r\n\r\n힙트리에서 값을 추가 할때는 마지막 노드로 붙여주고 위에서 했던것과 동일하게 힙을 만들어 줍니다.\r\n만약 새로운 값 17이 힙에 들어온다면 순서는 아래와 같이 바뀝니다.\r\n\r\n![만약 다음의 힙에서 17이라는 값이 추가 된다면](/blogging/algorithm/heap/add_new_17.svg)\r\n![이런식으로 부모노드와 바꿔가며, 다시 힙을 유지할 수 있어요.](/blogging/algorithm/heap/add_new_17_2.svg)\r\n\r\n\r\n> A: 새로 들어온 값 17은 트리의 맨뒤인 10번노드로 들어갑니다.     \r\n> 또한 마지막 내부노드이자 자신의 부모인 5번 노드(4)부터 다시 순회를 시작하며,  \r\n> 자신보다 큰 값은 가진 자식 10번 노드(17)과 값을 바꿉니다. \r\n> B: 값이 바뀐 10번 노드(4)는 자식을 가지고있지 않으므로 다음 순회로 넘어갑니다.  \r\n> C: 다음 순회인 4번 노드(6)은 자식들보다 큰값이므로 다음 3번 노드(12)로 이동합니다. 하지만 이또한 자식들보다 값이 크므로, 2번 노드(8)로 이동합니다. 자신보다 큰값을 가지는 5번 자식노드(17)과 바꿉니다.  \r\n> D: 값이 바뀐 5번 노드(8)은 자식들 보다 값이 커, 바꿀 필요가 없으므로 다음 순회인 1번 노드(15)로 이동합니다.  \r\n> E: 현재 순회인 1번 노드(15)는 자신의 2번 노드(17)보다 값이 작으므로 바꿉니다.  \r\n> F: 최종적으로 힙이 완성되었습니다.\r\n:{ \"type\": \"tip\", \"icon\": \"check-circle\" }\r\n\r\n\r\n### Heap을 이용해 정렬을 하는 방법\r\n\r\n힙 정렬을 위해서는 사전에 완전 이진 트리를 힙으로 만들고, 정렬을 수행할 수 있습니다.\r\n위에서 만든 힙을 통해 정렬을 하는 방법을 구현합니다.  \r\n힙 정렬은 간단하게, 아래의 정렬하는 순서를 가지고있습니다.\r\n\r\n1. 최상위 노드 `A`와 가장 끝의 노드 `B`를 바꾼다.\r\n2. 바꿔진 A는 맨뒤로 가며,힙에서 제외한다. \r\n3. 바꾼 값 `B`는, 자신의 자식이 있다면, 두개를 비교하여 가장 큰 값과 맞 바꾼다.\r\n4. `3.`의 내용을 힙이될때까지 반복한다.\r\n\r\n위의 순서를 반복하며, 만든 힙 정렬은 아래와 같습니다.\r\n\r\n![힙 정렬 1](/blogging/algorithm/heap/heap_sort_1_1.svg)\r\n![힙 정렬 2](/blogging/algorithm/heap/heap_sort_1_2.svg)\r\n![힙 정렬 3](/blogging/algorithm/heap/heap_sort_1_3.svg)\r\n![힙 정렬 4](/blogging/algorithm/heap/heap_sort_1_4.svg)\r\n![힙 정렬 5](/blogging/algorithm/heap/heap_sort_1_5.svg)\r\n![힙 정렬 6](/blogging/algorithm/heap/heap_sort_1_6.svg)\r\n![힙 정렬 7](/blogging/algorithm/heap/heap_sort_1_7.svg)\r\n![힙 정렬 8](/blogging/algorithm/heap/heap_sort_1_8.svg)\r\n\r\n## 구현 코드 (Java)\r\n\r\n```java\r\nimport java.util.Arrays;\r\n\r\npublic class Heap {\r\n    \r\n    //== 힙(Heap) 을 만드는 메소드 ==//\r\n    public static void makeHeap(int arr[]) {\r\n        // last heap\r\n        int lh = arr.length / 2;\r\n        System.out.println(\"Normal Array = \" + Arrays.toString(arr));\r\n        int eh = arr.length;\r\n        while (lh-- > 0) {\r\n\r\n            System.out.println(\"i: \" + lh);\r\n            pushDown(arr, lh, eh);\r\n        }\r\n\r\n        System.out.println(\"Array as Max Heap = \" + Arrays.toString(arr));\r\n    }\r\n    \r\n    \r\n    //== 노드와 그 자식중에서 더큰(또는 작은) 위치를 찾는 메소드 ==//\r\n    public static int findLargest(int arr[], int node, int eh) {\r\n        // first child\r\n        int fc = (2 * (node + 1)) - 1;\r\n\r\n        if (fc + 1 < eh) {\r\n            if (arr[fc] <= arr[fc + 1]) {\r\n                return arr[fc + 1] <= arr[node] ? node : fc + 1;\r\n            } else {\r\n                return arr[fc] <= arr[node] ? node : fc;\r\n            }\r\n        }\r\n        if (fc < eh && arr[node] < arr[fc]) {\r\n            return fc;\r\n        } else {\r\n            return node;\r\n        }\r\n    }\r\n    //== 값을 아래로 내리는 메소드 ==//\r\n\r\n    /**\r\n     * 간단하게 보면 트리에서 마지막 힙의 위치를 구하고,\r\n     * 루트 노드까지 역순으로 힙을 만들어갑니다.\r\n     * \r\n     * 최대 힙(또는 최소 힙)의 조건에 따라 더큰(또는 더 작은)값을 기준으로,\r\n     * 해당 노드를 위로올리고 변경된 대상은 아래로 내려가며 계속 바꿉니다.\r\n     */\r\n    public static void pushDown(int arr[], int node, int eh) {\r\n        do {\r\n            System.out.println(\"j: \" + node);\r\n            int temp = arr[node];\r\n            int large = findLargest(arr, node, eh);\r\n            System.out.println(drawBinaryTree(arr));\r\n\r\n            if (large == node)\r\n                break;\r\n\r\n            arr[node] = arr[large];\r\n            arr[large] = temp;\r\n\r\n            node = large;\r\n        } while (node <= eh);\r\n    }\r\n\r\n    public static void sort(int arr[]) {\r\n        int last = arr.length;\r\n        makeHeap(arr);\r\n\r\n        while (--last >= 0) {\r\n\r\n            int temp = arr[0];\r\n            arr[0] = arr[last];\r\n            arr[last] = temp;\r\n\r\n            System.out.println(\"last: \" + last);\r\n            pushDown(arr, 0, last);\r\n        }\r\n        ;\r\n    }\r\n\r\n    //== 출력 메소드 ==//\r\n    public static String drawBinaryTree(int arr[]) {\r\n        StringBuilder builder = new StringBuilder();\r\n\r\n        int nol = (int) (Math.log(arr.length) / Math.log(2)) + 1;\r\n        int max = (int) Math.pow(2, nol - 1);\r\n\r\n        int printed = 0;\r\n        for (int i = 0; i < nol; i++) {\r\n            int perFloor = (int) Math.pow(2, i);\r\n            int tab = (max - perFloor) / 2 + (max - perFloor) % 2;\r\n            int last = printed + perFloor;\r\n\r\n            for (int j = 0; j < tab; j++) {\r\n                builder.append(\"  \");\r\n            }\r\n            for (int j = printed; (j < arr.length && j < last); j++) {\r\n                builder.append(String.format(\"(%d)\", arr[j]));\r\n            }\r\n            builder.append(\"\\n\");\r\n            printed += perFloor;\r\n        }\r\n\r\n        return builder.toString();\r\n    }\r\n    \r\n    public static void main(String args []) throws Exception {\r\n        //== 힙 으로 만들기==//\r\n        int arrForMake [] = {1, 5, 8, 2, 74, 9, 12, 104, 87, 43};\r\n        Heap.makeHeap();\r\n        \r\n        //== 힙 + 정렬 ==//\r\n        int arrForSort [] = {1, 8, 9, 15, 4, 7, 12, 6, 4, 17};\r\n        Heap.sort(arr);\r\n        \r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n"
  }
]