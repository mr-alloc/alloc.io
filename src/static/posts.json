[
  {
    "path": "/docs/algorithm/heap-sort",
    "header": {
      "layout": "post",
      "title": "Heap sort (힙 정렬) feat.java",
      "categories": [
        "algorithm"
      ],
      "tags": [
        "Java",
        "Algorithm",
        "Sort",
        "Heap Sort",
        "Heap"
      ],
      "date": 1651837980000,
      "profile-image": "/post/profile/profile4.jpeg",
      "thumbnail": "/post/algorithm/heap/heap_sort_intro.png",
      "current-company": "Herit Corporation",
      "current-position": "Backend Server Developer",
      "summary": "힙과 힙정렬 (우선순위 큐)",
      "expose-images": true,
      "excerpt-separator": "<!--more-->",
      "hide": false,
      "breadcrumbs": [
        "문서",
        "알고리즘"
      ],
      "images": [
        {
          "src": "/post/algorithm/heap/tree_images.svg",
          "alt": "위 트리중 어떤것이 힙인지 찾아보세요."
        },
        {
          "src": "/post/algorithm/heap/first_iteration.svg",
          "alt": "힙을 만드려면 완전 이진트리가 있어야 해요."
        },
        {
          "src": "/post/algorithm/heap/other_iteration.svg",
          "alt": "만약 마지막 내부노드부터 순회할 때, 쵀대힙을 만드려면 위와 같이 만들수 있어요."
        },
        {
          "src": "/post/algorithm/heap/last_iteration.svg",
          "alt": "최대힙을 만들어 이런 형태로 노드를 나눌수 있어요."
        },
        {
          "src": "/post/algorithm/heap/add_new_17.svg",
          "alt": "만약 다음의 힙에서 17이라는 값이 추가 된다면"
        },
        {
          "src": "/post/algorithm/heap/add_new_17_2.svg",
          "alt": "이런식으로 부모노드와 바꿔가며, 다시 힙을 유지할 수 있어요."
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_1.svg",
          "alt": "힙 정렬 1"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_2.svg",
          "alt": "힙 정렬 2"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_3.svg",
          "alt": "힙 정렬 3"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_4.svg",
          "alt": "힙 정렬 4"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_5.svg",
          "alt": "힙 정렬 5"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_6.svg",
          "alt": "힙 정렬 6"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_7.svg",
          "alt": "힙 정렬 7"
        },
        {
          "src": "/post/algorithm/heap/heap_sort_1_8.svg",
          "alt": "힙 정렬 8"
        }
      ],
      "headlines": {
        "grade": 0,
        "title": "root",
        "fragmentId": "root",
        "children": [
          {
            "grade": 2,
            "title": "설명",
            "fragmentId": "%EC%84%A4%EB%AA%85",
            "children": [
              {
                "grade": 3,
                "title": "Heap의 속성 (특징)",
                "fragmentId": "heap%EC%9D%98-%EC%86%8D%EC%84%B1-(%ED%8A%B9%EC%A7%95)",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "Heap을 만드는 방법",
                "fragmentId": "heap%EC%9D%84-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "Heap이 우선 값을 유지하는 방법",
                "fragmentId": "heap%EC%9D%B4-%EC%9A%B0%EC%84%A0-%EA%B0%92%EC%9D%84-%EC%9C%A0%EC%A7%80%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
                "children": [],
                "isSelected": false
              },
              {
                "grade": 3,
                "title": "Heap을 이용해 정렬을 하는 방법",
                "fragmentId": "heap%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%A0%95%EB%A0%AC%EC%9D%84-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
                "children": [],
                "isSelected": false
              }
            ],
            "isSelected": false
          },
          {
            "grade": 2,
            "title": "구현 코드 (Java)",
            "fragmentId": "%EA%B5%AC%ED%98%84-%EC%BD%94%EB%93%9C-(java)",
            "children": [],
            "isSelected": false
          }
        ],
        "isSelected": false
      }
    },
    "description": "열라 간단한 우선순위 큐의 자료구조인 Heap에 대해 공부합니다.\n힙의 속성?! 힙이 최소 또는 최대값을 유지하는 방법?!\n\n힙을통해 정렬하는 방법까지 공부합니다. 😁\n\n",
    "content": "\n## 설명\n\n간단하게 말하여, 힙은 우선순위 큐 입니다. `JAVA`에서는 `PriorityQueue`라는 구현체를 통해 Heap 자료구조를 사용할 수 있어요.\n힙은 두 종류가 있는데 `최대 힙`과 `최소 힙`이 있어요. \n최대 Heap(최소 Heap)은 단어와 같이 최대 값(최소 값)을 우선순위로 판단하여, 어떠한 값이 들어와도, 항상 같은 순서의\n트리를 유지하며, 언제든지 최고 우선순위의 값을 적은 비용으로 쉽게 얻을수 있는 자료구조 입니다.\n\n### Heap의 속성 (특징)\n\n* 최대 힙(**또는 최소 힙**)은 `잎(leaf)`의 계층을 제외한 모든 노드는 자식의 노드 보다 큰(**또는 작은**) 값을 가지고 있어야합니다.\n* 왼쪽부터 차례대로 채워져있는 `완전 이진 트리(Complete binary tree)`이어야 합니다.\n* 같은 계층의 노드들과는 정렬하지 않습니다.\n* 루트(뿌리)노드로 부터 내려오는 위치의 노드들 오름차순(**또는 내림차순**)입니다\n\n![위 트리중 어떤것이 힙인지 찾아보세요.](/post/algorithm/heap/tree_images.svg)\n\n* 트리 A: 잎을 제외한 노드는 모두 정렬되었지만, 왼쪽부터 채워지지않아 Heap이 아닙니다.\n* 트리 B: 왼쪽부터 채워졌지만, 2번노드의 값은 그 자식에값보다 작습니다. 따라서 Heap이 아닙니다.\n* 트리 C: 잎을 제외한 모든 노드가 자식 또는 부모와 정렬 되어있고, 왼쪽부터 채워져있으므로 `Heap`입니다.\n\n> 이를 정리하면 아래와 같습니다.   \n> 1.`𝑛개`의 노드를 가진 힙은 정확히 하나만 있고 그 힙(트리)의 높이(height)는 `⎣log₂𝑛⎦`이다. 트리의 전체 노드의 개수가 `8`일경우 트리(힙)의 높이는 `3`이다. 즉 힢의 높이는 힙의 성질(속성)에 부합되는 노드들만 인정이 된다는 의미이다.  \n> 2.힙의 루트 노드는 항상 최댓값(**또는 최솟값**)을 저장한다. 최대 힙(**또는 최소 힙**)은 쵀댓값(**또는 최솟값**)을 효율적으로 관리하기 위한 자료구조이며, 루트에는 항상 가장 큰(**또는 작은**)값을 유지한다.  \n> 3.힙의 한 노드와 그 노드의 자손 노드들로 이루어진 부분 트리(subtree)도 힙이다. 힙은 힙으로 이루어져있으며 자식노드도 힙이 될수있지만, 노드의 자식이없다면 힙이될 수없다. 따라서 위 C 트리의 `4, 5, 6`번 노드는 힙이 아니다.  \n:{ \"type\": \"note\", \"icon\": \"info\" }\n\n### Heap을 만드는 방법\n\n힙을 구성 하기 위해서는 다음의 순서대로 진행됩니다.\n\n1. 순회를 시작할 힙이되는 마지막 노드`⎣𝑛/₂⎦`를 찾는다.\n2. 마지막 노드 i를 이용해 자식노드가 있는지, 또한 있다면 그 중 자신 보다 큰값을 자신과 찾는다.\n3. 찾은 값과 자신을 바꾸고 바꾼 자신의 위치는 그값의 자식이 되며, 자신보다 큰값이 나오지 않을때까지 반복한다.\n4. 다음 노드(i -1)에서 다시 `3.`을 반복한다.\n\n> 자식 노드의 위치를 찾을때는 왼쪽`arr[2i]`값과 오른쪽`arr[2i + 1]`로 구할 수 있습니다.\n:{ \"type\": \"tip\", \"icon\": \"lightbulb\" }\n\n위 의 내용을 정리하면 아래와 같습니다.\n\n\n![힙을 만드려면 완전 이진트리가 있어야 해요.](/post/algorithm/heap/first_iteration.svg)\n\n> 위의 트리는 *완전 이진트리* 입니다. 힙은 완전이진트리에서 만들수 있으므로, 일반 이진트리는 Compact하게 완전이진트리로 바꿔야 힙을 만들수 있습니다.\n> 왼쪽 트리의 마지막 힙의 값은 `15` 이며, 이는 자식(`6, 4`) 어느것 보다도 큰값입니다. 따라서 다음 순회로 넘어갑니다.\n> 순회는 내부 노드의 마지막 힙의 위치에서 부터 1까지 이어집니다. 따라서 다음 인덱스인 3번 노드(9)로 넘어갑니다.\n> 3번노드는 자신의 자식들 중 6번째, 7번째 (7, 12)와 비교하여 더 큰값을 가지는 12와 바꿉니다.\n:{ \"type\": \"note\", \"icon\": \"info\" }\n\n![만약 마지막 내부노드부터 순회할 때, 쵀대힙을 만드려면 위와 같이 만들수 있어요.](/post/algorithm/heap/other_iteration.svg)\n\n> 이후 과정은 위와 같이 반복됩니다. 내부노드를 순회하며 자신의 자식노드가 있는지 확인하고 있다면, 자신과 비교하여 더큰 값으로 바꿉니다. 이는 바꾼이후에도 `3.`이 반복되게 됩니다. 순회되는 노드가 최상위노드가 되고 모든 내부노드가 힙이 될때, 전체 트리는 힙이 됩니다.   \n> 마지막까지 바꾼 최종트리는 아래와 같습니다.\n:{ \"type\": \"note\", \"icon\": \"info\" }\n\n![최대힙을 만들어 이런 형태로 노드를 나눌수 있어요.](/post/algorithm/heap/last_iteration.svg)\n\n* 최상위 노드(루트)가 가장 큰값이 되며, 위는 최대힙을 만드는 단계였습니다.\n* 부모노드와 자식노드끼리는 순서의 값을 가지며, 항상 최대의 값을 가집니다.  \n\n### Heap이 우선 값을 유지하는 방법\n\n위에서는 완전이진트리로 힙을 어떻게 만드는지에 대해 알아봤습니다.\n하지만, 힙은 언제나 새로운값이 들어와도 항상 우선 순위로 값을 관리합니다. 만약 저기서 더큰값이 추가된다면,\n저 힙트리는 어떻게 바뀔까요? 새로운 값들을 추가해서 힙이 다시 어떻게 유지되는지 배워봅니다.\n\n#### 값추가\n\n힙트리에서 값을 추가 할때는 마지막 노드로 붙여주고 위에서 했던것과 동일하게 힙을 만들어 줍니다.\n만약 새로운 값 17이 힙에 들어온다면 순서는 아래와 같이 바뀝니다.\n\n![만약 다음의 힙에서 17이라는 값이 추가 된다면](/post/algorithm/heap/add_new_17.svg)\n![이런식으로 부모노드와 바꿔가며, 다시 힙을 유지할 수 있어요.](/post/algorithm/heap/add_new_17_2.svg)\n\n\n> A: 새로 들어온 값 17은 트리의 맨뒤인 10번노드로 들어갑니다.     \n> 또한 마지막 내부노드이자 자신의 부모인 5번 노드(4)부터 다시 순회를 시작하며,  \n> 자신보다 큰 값은 가진 자식 10번 노드(17)과 값을 바꿉니다. \n> B: 값이 바뀐 10번 노드(4)는 자식을 가지고있지 않으므로 다음 순회로 넘어갑니다.  \n> C: 다음 순회인 4번 노드(6)은 자식들보다 큰값이므로 다음 3번 노드(12)로 이동합니다. 하지만 이또한 자식들보다 값이 크므로, 2번 노드(8)로 이동합니다. 자신보다 큰값을 가지는 5번 자식노드(17)과 바꿉니다.  \n> D: 값이 바뀐 5번 노드(8)은 자식들 보다 값이 커, 바꿀 필요가 없으므로 다음 순회인 1번 노드(15)로 이동합니다.  \n> E: 현재 순회인 1번 노드(15)는 자신의 2번 노드(17)보다 값이 작으므로 바꿉니다.  \n> F: 최종적으로 힙이 완성되었습니다.\n:{ \"type\": \"tip\", \"icon\": \"check-circle\" }\n\n\n### Heap을 이용해 정렬을 하는 방법\n\n힙 정렬을 위해서는 사전에 완전 이진 트리를 힙으로 만들고, 정렬을 수행할 수 있습니다.\n위에서 만든 힙을 통해 정렬을 하는 방법을 구현합니다.  \n힙 정렬은 간단하게, 아래의 정렬하는 순서를 가지고있습니다.\n\n1. 최상위 노드 `A`와 가장 끝의 노드 `B`를 바꾼다.\n2. 바꿔진 A는 맨뒤로 가며,힙에서 제외한다. \n3. 바꾼 값 `B`는, 자신의 자식이 있다면, 두개를 비교하여 가장 큰 값과 맞 바꾼다.\n4. `3.`의 내용을 힙이될때까지 반복한다.\n\n위의 순서를 반복하며, 만든 힙 정렬은 아래와 같습니다.\n\n![힙 정렬 1](/post/algorithm/heap/heap_sort_1_1.svg)\n![힙 정렬 2](/post/algorithm/heap/heap_sort_1_2.svg)\n![힙 정렬 3](/post/algorithm/heap/heap_sort_1_3.svg)\n![힙 정렬 4](/post/algorithm/heap/heap_sort_1_4.svg)\n![힙 정렬 5](/post/algorithm/heap/heap_sort_1_5.svg)\n![힙 정렬 6](/post/algorithm/heap/heap_sort_1_6.svg)\n![힙 정렬 7](/post/algorithm/heap/heap_sort_1_7.svg)\n![힙 정렬 8](/post/algorithm/heap/heap_sort_1_8.svg)\n\n## 구현 코드 (Java)\n\n```java\nimport java.util.Arrays;\n\npublic class Heap {\n    \n    //== 힙(Heap) 을 만드는 메소드 ==//\n    public static void makeHeap(int arr[]) {\n        // last heap\n        int lh = arr.length / 2;\n        System.out.println(\"Normal Array = \" + Arrays.toString(arr));\n        int eh = arr.length;\n        while (lh-- > 0) {\n\n            System.out.println(\"i: \" + lh);\n            pushDown(arr, lh, eh);\n        }\n\n        System.out.println(\"Array as Max Heap = \" + Arrays.toString(arr));\n    }\n    \n    \n    //== 노드와 그 자식중에서 더큰(또는 작은) 위치를 찾는 메소드 ==//\n    public static int findLargest(int arr[], int node, int eh) {\n        // first child\n        int fc = (2 * (node + 1)) - 1;\n\n        if (fc + 1 < eh) {\n            if (arr[fc] <= arr[fc + 1]) {\n                return arr[fc + 1] <= arr[node] ? node : fc + 1;\n            } else {\n                return arr[fc] <= arr[node] ? node : fc;\n            }\n        }\n        if (fc < eh && arr[node] < arr[fc]) {\n            return fc;\n        } else {\n            return node;\n        }\n    }\n    //== 값을 아래로 내리는 메소드 ==//\n\n    /**\n     * 간단하게 보면 트리에서 마지막 힙의 위치를 구하고,\n     * 루트 노드까지 역순으로 힙을 만들어갑니다.\n     * \n     * 최대 힙(또는 최소 힙)의 조건에 따라 더큰(또는 더 작은)값을 기준으로,\n     * 해당 노드를 위로올리고 변경된 대상은 아래로 내려가며 계속 바꿉니다.\n     */\n    public static void pushDown(int arr[], int node, int eh) {\n        do {\n            System.out.println(\"j: \" + node);\n            int temp = arr[node];\n            int large = findLargest(arr, node, eh);\n            System.out.println(drawBinaryTree(arr));\n\n            if (large == node)\n                break;\n\n            arr[node] = arr[large];\n            arr[large] = temp;\n\n            node = large;\n        } while (node <= eh);\n    }\n\n    public static void sort(int arr[]) {\n        int last = arr.length;\n        makeHeap(arr);\n\n        while (--last >= 0) {\n\n            int temp = arr[0];\n            arr[0] = arr[last];\n            arr[last] = temp;\n\n            System.out.println(\"last: \" + last);\n            pushDown(arr, 0, last);\n        }\n        ;\n    }\n\n    //== 출력 메소드 ==//\n    public static String drawBinaryTree(int arr[]) {\n        StringBuilder builder = new StringBuilder();\n\n        int nol = (int) (Math.log(arr.length) / Math.log(2)) + 1;\n        int max = (int) Math.pow(2, nol - 1);\n\n        int printed = 0;\n        for (int i = 0; i < nol; i++) {\n            int perFloor = (int) Math.pow(2, i);\n            int tab = (max - perFloor) / 2 + (max - perFloor) % 2;\n            int last = printed + perFloor;\n\n            for (int j = 0; j < tab; j++) {\n                builder.append(\"  \");\n            }\n            for (int j = printed; (j < arr.length && j < last); j++) {\n                builder.append(String.format(\"(%d)\", arr[j]));\n            }\n            builder.append(\"\\n\");\n            printed += perFloor;\n        }\n\n        return builder.toString();\n    }\n    \n    public static void main(String args []) throws Exception {\n        //== 힙 으로 만들기==//\n        int arrForMake [] = {1, 5, 8, 2, 74, 9, 12, 104, 87, 43};\n        Heap.makeHeap();\n        \n        //== 힙 + 정렬 ==//\n        int arrForSort [] = {1, 8, 9, 15, 4, 7, 12, 6, 4, 17};\n        Heap.sort(arr);\n        \n    }\n}\n```\n\n\n\n"
  },
  {
    "path": "/docs/computer/interrupts",
    "header": {
      "layout": "wiki",
      "title": "CPU와 인터럽트",
      "categories": [
        "computer"
      ],
      "tags": [
        "Operating System",
        "Interrupt"
      ],
      "date": 1610544780000,
      "current-company": "Cubic INC",
      "current-position": "SI Researcher",
      "summary": "인터럽트란?",
      "hide": false,
      "breadcrumbs": [
        "문서",
        "computer"
      ],
      "images": [
        {
          "src": "/post/computer/move-unit.png",
          "alt": "캐릭터의 이동"
        }
      ],
      "headlines": {
        "grade": 0,
        "title": "root",
        "fragmentId": "root",
        "children": [
          {
            "grade": 2,
            "title": "인터럽트는 무엇인가?",
            "fragmentId": "%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%3F",
            "children": [],
            "isSelected": false
          },
          {
            "grade": 2,
            "title": "인터럽트 서비스 루틴",
            "fragmentId": "%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A3%A8%ED%8B%B4",
            "children": [],
            "isSelected": false
          },
          {
            "grade": 2,
            "title": "인터럽트의 매커니즘",
            "fragmentId": "%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EB%A7%A4%EC%BB%A4%EB%8B%88%EC%A6%98",
            "children": [],
            "isSelected": false
          }
        ],
        "isSelected": false
      }
    },
    "description": "",
    "content": "\n## 인터럽트는 무엇인가?\n\ninterrupt `[ˌɪntəˈrʌpt]`\n1. (말·행동을) 방해하다[중단시키다/가로막다]\n2. (무엇을 잠깐) 중단시키다\n\n사전 상의 `interrupt`(이하 인터럽트)는 위와 같은 어떤 행동이나 흐름을 중단시키는 의미로 등재 되어있다.\n컴퓨터에서도 인터럽트는 어떤 흐름을 중지하는 역할을 한다.\n\n[CPU]()는 순차적으로 명령어를 처리한다. 하지만 예상치못하거나 긴급한상황에 의도적으로 특별한 처리를 해야한다.\n예를 들어 스타크래프트나 리그오브레전드처럼 3인칭시점에서 마우스로 지면을 클릭하는 경우, 해당위치로 캐릭터가 이동한다.\n이 경우 이동이 끝나지 않아도, 우리는 새로운 위치를 클릭하여 방향을 바꿀수도있다. \n\n![캐릭터의 이동](/post/computer/move-unit.png)\n:{ \"max-width\": \"300px\", \"description\": \"눈꽃시비르의 방향을 조작하는 프로겐 선수\" }\n\n이 처럼 CPU가 명령을 실행하는중에도 긴급하거나, 실시간 처리가 필요한경우 IRQ를 통해, CPU에 인터럽트 신호를 보내 우선적으로 처리를 수행할 수 있다.\n\n> **I**nterrupt **R**e**Q**uest Line는 인터럽트 요청을 받을수있는 인터럽트 버스이다 이는 하드웨어에서 각 장치까지 물리적으로 연결된 신호선이다.\n:{ \"type\": \"note\", \"icon\": \"info\"}\n\n## 인터럽트 서비스 루틴\n\n**I**nterrupt **S**ervice **R**outine (이하 ISR)은 다른말로 Interrupt Handler(인터럽트 핸들러)라고도 한다.\n`ISR`은 인터럽트를 처리하기위한 어떤 일련의 프로세스이다. `IRQ`를 통해 `CPU`로 인터럽트 신호를 보내면(CPU의 인터럽트), CPU는 하던 일을 중단하고 ISR이 있는 주소로 실행을 옮긴다.\n그리고 `ISR`이 실행된후 다시 원래 연산을 재개한다. ISR은 인터럽트 번호 테이블로 구성되어있다. 이는 시스템마다 다를수 있고 콜백루틴 방식으로 처리된다.\n\n인터럽트 원인에 따라 처리되는 ISR이 별도로 있으며,이는 [커널(kernel)]()에 존재한다. \n인터럽트가 발생되는 원인은 일반적으로 `하드웨어 리셋`, `정해진 메모리 외부 참조`, `0으로 나누기` 등 여러 예외가 존재한다.\n\n인터럽트가 발생하면 `ISR`의 주소를 Interrupt Vector(이하 인터럽트 벡터)라고 하는 배열을 인터럽트 요청과 함께 장치 고유번호로 인덱싱한다.\n또한 `CPU`는 현재 실행 중이던 작업을 중단하고 `ISR`을 실행해야하기 때문에 실행중인 작업의 레지스터 값들을 스택에 저장하여 상태를 보존한다.\n이러한 값들에는 [프로그램 카운터(이하 PC)](), [스택 포인터]() 등 범용 레지스터 들이 포함된다. \n\n`ISR`이 실행되는 동안에는 프로세서의 레지스터 값을 변경할수 있기때문에, `ISR`이 끝나기전에 스택에 저장해 두었던 레지스터 값들을 다시 복원 하여 CPU가 인터럽트 발생 전 상태로 되돌아 갈수 있게 레지스터 값을 원복한다.\n`ISR`실행 후 인터럽트 요청에서 받았았던 복귀 주서를 `PC`로 적재하여 인터럽트 발생시점부터 실행을 옮겨 중단되었던 연산을 다시 시작한다.\n\n## 인터럽트의 매커니즘\n\n인터럽트는 CPU연산 중 신호를 받아 `ISR`을 실행한다고 하였다. 하지만 컴퓨터는 동기순차회로이기 떄문에 순차적으로 연산이 이루어져야 한다.\n때문에, CPU가 하나의 명령어 실행이 완료될 때마다 IRQ를 감지하여 인터럽트 번호를 읽어 이 번호를 인터럽트 벡터의 인덱스로 사용하여, `ISR`로 점프하여 인덱스와 관련된 주소에서 실행을 시작한다.\n인터럽트 처리후 복원까지 수행하면 `return_from_interrupt` 명령어로 CPU를 인터럽트 전 실행상태로 되돌린다.\n\n\n"
  }
]